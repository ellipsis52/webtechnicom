Example::
        color = oneOf("RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN")
        shape_type = oneOf("SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON")
        integer = Word(nums)
        shape_attr = "shape:" + shape_type("shape")
        posn_attr = "posn:" + Group(integer("x") + ',' + integer("y"))("posn")
        color_attr = "color:" + color("color")
        size_attr = "size:" + integer("size")

        # use Each (using operator '&') to accept attributes in any order
        # (shape and posn are required, color and size are optional)
        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

        shape_spec.runTests('''
            shape: SQUARE color: BLACK posn: 100, 120
            shape: CIRCLE size: 50 color: BLUE posn: 50,80
            color:GREEN size:20 shape:TRIANGLE posn:20,40
            '''
            )
    prints::
        shape: SQUARE color: BLACK posn: 100, 120
        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
        - color: BLACK
        - posn: ['100', ',', '120']
          - x: 100
          - y: 120
        - shape: SQUARE


        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
        - color: BLUE
        - posn: ['50', ',', '80']
          - x: 50
          - y: 80
        - shape: CIRCLE
        - size: 50


        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
        - color: GREEN
        - posn: ['20', ',', '40']
          - x: 20
          - y: 40
        - shape: TRIANGLE
        - size: 20
    """

                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3645:18: E201 whitespace after '('
    def __init__( self, exprs, savelist = True ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3645:40: E251 unexpected spaces around keyword / parameter equals
    def __init__( self, exprs, savelist = True ):
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3645:42: E251 unexpected spaces around keyword / parameter equals
    def __init__( self, exprs, savelist = True ):
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3645:47: E202 whitespace before ')'
    def __init__( self, exprs, savelist = True ):
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3646:19: E231 missing whitespace after ','
        super(Each,self).__init__(exprs, savelist)
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3651:5: C901 'Each.parseImpl' is too complex (11)
    def parseImpl( self, instring, loc, doActions=True ):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3651:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3651:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3653:44: E231 missing whitespace after ','
            self.opt1map = dict((id(e.expr),e) for e in self.exprs if isinstance(e,Optional))
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3653:83: E231 missing whitespace after ','
            self.opt1map = dict((id(e.expr),e) for e in self.exprs if isinstance(e,Optional))
                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3654:21: E201 whitespace after '['
            opt1 = [ e.expr for e in self.exprs if isinstance(e,Optional) ]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3654:64: E231 missing whitespace after ','
            opt1 = [ e.expr for e in self.exprs if isinstance(e,Optional) ]
                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3654:74: E202 whitespace before ']'
            opt1 = [ e.expr for e in self.exprs if isinstance(e,Optional) ]
                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3655:21: E201 whitespace after '['
            opt2 = [ e for e in self.exprs if e.mayReturnEmpty and not isinstance(e,Optional)]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3655:84: E231 missing whitespace after ','
            opt2 = [ e for e in self.exprs if e.mayReturnEmpty and not isinstance(e,Optional)]
                                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3657:36: E201 whitespace after '['
            self.multioptionals = [ e.expr for e in self.exprs if isinstance(e,ZeroOrMore) ]
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3657:79: E231 missing whitespace after ','
            self.multioptionals = [ e.expr for e in self.exprs if isinstance(e,ZeroOrMore) ]
                                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3657:91: E202 whitespace before ']'
            self.multioptionals = [ e.expr for e in self.exprs if isinstance(e,ZeroOrMore) ]
                                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3658:35: E201 whitespace after '['
            self.multirequired = [ e.expr for e in self.exprs if isinstance(e,OneOrMore) ]
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3658:78: E231 missing whitespace after ','
            self.multirequired = [ e.expr for e in self.exprs if isinstance(e,OneOrMore) ]
                                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3658:89: E202 whitespace before ']'
            self.multirequired = [ e.expr for e in self.exprs if isinstance(e,OneOrMore) ]
                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3659:30: E201 whitespace after '['
            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3659:72: E231 missing whitespace after ','
            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3659:82: E231 missing whitespace after ','
            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
                                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3659:93: E231 missing whitespace after ','
            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
                                                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3659:105: E202 whitespace before ']'
            self.required = [ e for e in self.exprs if not isinstance(e,(Optional,ZeroOrMore,OneOrMore)) ]
                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3664:15: E221 multiple spaces before operator
        tmpOpt  = self.optionals[:]
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3673:41: E201 whitespace after '('
                    tmpLoc = e.tryParse( instring, tmpLoc )
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3673:58: E202 whitespace before ')'
                    tmpLoc = e.tryParse( instring, tmpLoc )
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3677:61: E231 missing whitespace after ','
                    matchOrder.append(self.opt1map.get(id(e),e))
                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3687:42: E231 missing whitespace after ','
            raise ParseException(instring,loc,"Missing one or more required elements (%s)" % missing )
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3687:46: E231 missing whitespace after ','
            raise ParseException(instring,loc,"Missing one or more required elements (%s)" % missing )
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3687:101: E202 whitespace before ')'
            raise ParseException(instring,loc,"Missing one or more required elements (%s)" % missing )
                                                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3690:61: E231 missing whitespace after ','
        matchOrder += [e for e in self.exprs if isinstance(e,Optional) and e.expr in tmpOpt]
                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3694:16: E231 missing whitespace after ','
            loc,results = e._parse(instring,loc,doActions)
               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3694:44: E231 missing whitespace after ','
            loc,results = e._parse(instring,loc,doActions)
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3694:48: E231 missing whitespace after ','
            loc,results = e._parse(instring,loc,doActions)
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3700:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3700:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3701:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3709:24: E201 whitespace after '('
    def checkRecursion( self, parseElementList ):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3709:47: E202 whitespace before ')'
    def checkRecursion( self, parseElementList ):
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3710:50: E201 whitespace after '['
        subRecCheckList = parseElementList[:] + [ self ]
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3710:55: E202 whitespace before ']'
        subRecCheckList = parseElementList[:] + [ self ]
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3712:30: E201 whitespace after '('
            e.checkRecursion( subRecCheckList )
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3712:46: E202 whitespace before ')'
            e.checkRecursion( subRecCheckList )
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3719:18: E201 whitespace after '('
    def __init__( self, expr, savelist=False ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3719:45: E202 whitespace before ')'
    def __init__( self, expr, savelist=False ):
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3720:34: E231 missing whitespace after ','
        super(ParseElementEnhance,self).__init__(savelist)
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3721:23: E201 whitespace after '('
        if isinstance( expr, basestring ):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3721:40: E202 whitespace before ')'
        if isinstance( expr, basestring ):
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3731:37: E201 whitespace after '('
            self.setWhitespaceChars( expr.whiteChars )
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3731:53: E202 whitespace before ')'
            self.setWhitespaceChars( expr.whiteChars )
                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3737:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3737:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3739:37: E201 whitespace after '('
            return self.expr._parse( instring, loc, doActions, callPreParse=False )
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3739:82: E202 whitespace before ')'
            return self.expr._parse( instring, loc, doActions, callPreParse=False )
                                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3741:36: E231 missing whitespace after ','
            raise ParseException("",loc,self.errmsg,self)
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3741:40: E231 missing whitespace after ','
            raise ParseException("",loc,self.errmsg,self)
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3741:52: E231 missing whitespace after ','
            raise ParseException("",loc,self.errmsg,self)
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3743:25: E201 whitespace after '('
    def leaveWhitespace( self ):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3743:30: E202 whitespace before ')'
    def leaveWhitespace( self ):
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3750:16: E201 whitespace after '('
    def ignore( self, other ):
               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3750:28: E202 whitespace before ')'
    def ignore( self, other ):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3751:23: E201 whitespace after '('
        if isinstance( other, Suppress ):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3751:39: E202 whitespace before ')'
        if isinstance( other, Suppress ):
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3753:23: E201 whitespace after '('
                super( ParseElementEnhance, self).ignore( other )
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3753:58: E201 whitespace after '('
                super( ParseElementEnhance, self).ignore( other )
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3753:64: E202 whitespace before ')'
                super( ParseElementEnhance, self).ignore( other )
                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3755:38: E201 whitespace after '('
                    self.expr.ignore( self.ignoreExprs[-1] )
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3755:59: E202 whitespace before ')'
                    self.expr.ignore( self.ignoreExprs[-1] )
                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3757:19: E201 whitespace after '('
            super( ParseElementEnhance, self).ignore( other )
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3757:54: E201 whitespace after '('
            super( ParseElementEnhance, self).ignore( other )
                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3757:60: E202 whitespace before ')'
            super( ParseElementEnhance, self).ignore( other )
                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3759:34: E201 whitespace after '('
                self.expr.ignore( self.ignoreExprs[-1] )
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3759:55: E202 whitespace before ')'
                self.expr.ignore( self.ignoreExprs[-1] )
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3762:20: E201 whitespace after '('
    def streamline( self ):
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3762:25: E202 whitespace before ')'
    def streamline( self ):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3763:34: E231 missing whitespace after ','
        super(ParseElementEnhance,self).streamline()
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3768:24: E201 whitespace after '('
    def checkRecursion( self, parseElementList ):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3768:47: E202 whitespace before ')'
    def checkRecursion( self, parseElementList ):
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3770:45: E201 whitespace after '('
            raise RecursiveGrammarException( parseElementList+[self] )
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3770:69: E202 whitespace before ')'
            raise RecursiveGrammarException( parseElementList+[self] )
                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3771:50: E201 whitespace after '['
        subRecCheckList = parseElementList[:] + [ self ]
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3771:55: E202 whitespace before ']'
        subRecCheckList = parseElementList[:] + [ self ]
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3773:38: E201 whitespace after '('
            self.expr.checkRecursion( subRecCheckList )
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3773:54: E202 whitespace before ')'
            self.expr.checkRecursion( subRecCheckList )
                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3775:18: E201 whitespace after '('
    def validate( self, validateTrace=[] ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3775:41: E202 whitespace before ')'
    def validate( self, validateTrace=[] ):
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3779:29: E201 whitespace after '('
        self.checkRecursion( [] )
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3779:32: E202 whitespace before ')'
        self.checkRecursion( [] )
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3781:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3781:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3783:45: E231 missing whitespace after ','
            return super(ParseElementEnhance,self).__str__()
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3788:41: E201 whitespace after '('
            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.expr) )
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3788:83: E202 whitespace before ')'
            self.strRepr = "%s:(%s)" % ( self.__class__.__name__, _ustr(self.expr) )
                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3804:1: W293 blank line contains whitespace
    """
    Lookahead matching of the given parse expression.  C{FollowedBy}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  C{FollowedBy} always returns a null token list.

    Example::
        # use FollowedBy to match a label only if it is followed by a ':'
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

        OneOrMore(attr_expr).parseString("shape: SQUARE color: BLACK posn: upper left").pprint()
    prints::
        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3809:18: E201 whitespace after '('
    def __init__( self, expr ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3809:29: E202 whitespace before ')'
    def __init__( self, expr ):
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3810:25: E231 missing whitespace after ','
        super(FollowedBy,self).__init__(expr)
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3813:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3813:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3814:28: E201 whitespace after '('
        self.expr.tryParse( instring, loc )
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3814:42: E202 whitespace before ')'
        self.expr.tryParse( instring, loc )
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3827:1: W293 blank line contains whitespace
    """
    Lookahead to disallow matching with the given parse expression.  C{NotAny}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression does I{not} match at the current
    position.  Also, C{NotAny} does I{not} skip over leading whitespace. C{NotAny}
    always returns a null token list.  May be constructed using the '~' operator.

    Example::

    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3829:18: E201 whitespace after '('
    def __init__( self, expr ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3829:29: E202 whitespace before ')'
    def __init__( self, expr ):
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3830:21: E231 missing whitespace after ','
        super(NotAny,self).__init__(expr)
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3831:9: E265 block comment should start with '# '
        #~ self.leaveWhitespace()
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3836:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3836:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3841:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3841:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3842:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3850:1: E302 expected 2 blank lines, found 1
class _MultipleMatch(ParseElementEnhance):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3851:18: E201 whitespace after '('
    def __init__( self, expr, stopOn=None):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3859:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3859:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3865:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3870:39: E201 whitespace after '('
        loc, tokens = self_expr_parse( instring, loc, doActions, callPreParse=False )
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3870:84: E202 whitespace before ')'
        loc, tokens = self_expr_parse( instring, loc, doActions, callPreParse=False )
                                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3877:51: E201 whitespace after '('
                    preloc = self_skip_ignorables( instring, loc )
                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3877:65: E202 whitespace before ')'
                    preloc = self_skip_ignorables( instring, loc )
                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3880:50: E201 whitespace after '('
                loc, tmptokens = self_expr_parse( instring, preloc, doActions )
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3880:78: E202 whitespace before ')'
                loc, tmptokens = self_expr_parse( instring, preloc, doActions )
                                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3883:31: E231 missing whitespace after ','
        except (ParseException,IndexError):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3887:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3888:1: E302 expected 2 blank lines, found 1
class OneOrMore(_MultipleMatch):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3891:1: W293 blank line contains whitespace
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3895:79: W291 trailing whitespace
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """



          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3896:22: W291 trailing whitespace
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """

             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3904:121: E501 line too long (138 > 120 characters)
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """




                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3908:121: E501 line too long (133 > 120 characters)
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """




                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3909:1: W293 blank line contains whitespace
    """
    Repetition of one or more of the given expression.

    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: BLACK"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]

        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3914:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3914:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3915:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3923:1: E302 expected 2 blank lines, found 1
class ZeroOrMore(_MultipleMatch):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3926:1: W293 blank line contains whitespace
    """
    Optional repetition of zero or more of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example: similar to L{OneOrMore}
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3930:79: W291 trailing whitespace
    """
    Optional repetition of zero or more of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example: similar to L{OneOrMore}
    """



^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3931:22: W291 trailing whitespace
    """
    Optional repetition of zero or more of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition
          expression)

    Example: similar to L{OneOrMore}
    """

             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3935:18: E201 whitespace after '('
    def __init__( self, expr, stopOn=None):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3936:25: E231 missing whitespace after ','
        super(ZeroOrMore,self).__init__(expr, stopOn=stopOn)
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3938:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3939:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3939:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3942:31: E231 missing whitespace after ','
        except (ParseException,IndexError):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3945:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3945:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3946:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3954:1: E302 expected 2 blank lines, found 1
class _NullToken(object):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3958:5: E301 expected 1 blank line, found 0
    def __str__(self):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3961:1: E305 expected 2 blank lines after class or function definition, found 1
_optionalNotMatched = _NullToken()
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3962:1: E302 expected 2 blank lines, found 0
class Optional(ParseElementEnhance):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3976:1: W293 blank line contains whitespace
    """
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345

            # ZIP+4 form
            12101-0001

            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3979:1: W293 blank line contains whitespace
    """
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345

            # ZIP+4 form
            12101-0001

            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3997:18: E201 whitespace after '('
    def __init__( self, expr, default=_optionalNotMatched ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3997:58: E202 whitespace before ')'
    def __init__( self, expr, default=_optionalNotMatched ):
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3998:23: E231 missing whitespace after ','
        super(Optional,self).__init__( expr, savelist=False )
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3998:39: E201 whitespace after '('
        super(Optional,self).__init__( expr, savelist=False )
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:3998:60: E202 whitespace before ')'
        super(Optional,self).__init__( expr, savelist=False )
                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4003:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4003:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4005:44: E201 whitespace after '('
            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4005:89: E202 whitespace before ')'
            loc, tokens = self.expr._parse( instring, loc, doActions, callPreParse=False )
                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4006:31: E231 missing whitespace after ','
        except (ParseException,IndexError):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4009:44: E201 whitespace after '['
                    tokens = ParseResults([ self.defaultValue ])
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4009:62: E202 whitespace before ']'
                    tokens = ParseResults([ self.defaultValue ])
                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4012:31: E201 whitespace after '['
                    tokens = [ self.defaultValue ]
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4012:49: E202 whitespace before ']'
                    tokens = [ self.defaultValue ]
                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4017:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4017:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4018:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4026:1: E302 expected 2 blank lines, found 1
class SkipTo(ParseElementEnhance):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4032:82: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4034:88: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4036:80: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4037:88: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4057:50: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4058:49: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4059:50: W291 trailing whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """

                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4061:1: W293 blank line contains whitespace
    """
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be
          included in the skipped test; if found before the target expression is found,
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer("issue_num") + SEP
                      + string_data("sev") + SEP
                      + string_data("desc") + SEP
                      + integer("days_open"))

        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4081:18: E201 whitespace after '('
    def __init__( self, other, include=False, ignore=None, failOn=None ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4081:71: E202 whitespace before ')'
    def __init__( self, other, include=False, ignore=None, failOn=None ):
                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4082:15: E201 whitespace after '('
        super( SkipTo, self ).__init__( other )
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4082:28: E202 whitespace before ')'
        super( SkipTo, self ).__init__( other )
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4082:40: E201 whitespace after '('
        super( SkipTo, self ).__init__( other )
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4082:46: E202 whitespace before ')'
        super( SkipTo, self ).__init__( other )
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4094:5: C901 'SkipTo.parseImpl' is too complex (11)
    def parseImpl( self, instring, loc, doActions=True ):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4094:19: E201 whitespace after '('
    def parseImpl( self, instring, loc, doActions=True ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4094:55: E202 whitespace before ')'
    def parseImpl( self, instring, loc, doActions=True ):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4097:9: F841 local variable 'expr' is assigned to but never used
        expr = self.expr
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4101:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4108:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4116:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4134:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4136:43: E231 missing whitespace after ','
            loc, mat = expr_parse(instring,loc,doActions,callPreParse=False)
                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4136:47: E231 missing whitespace after ','
            loc, mat = expr_parse(instring,loc,doActions,callPreParse=False)
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4136:57: E231 missing whitespace after ','
            loc, mat = expr_parse(instring,loc,doActions,callPreParse=False)
                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4141:1: E302 expected 2 blank lines, found 1
class Forward(ParseElementEnhance):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4160:18: E201 whitespace after '('
    def __init__( self, other=None ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4160:35: E202 whitespace before ')'
    def __init__( self, other=None ):
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4161:22: E231 missing whitespace after ','
        super(Forward,self).__init__( other, savelist=False )
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4161:38: E201 whitespace after '('
        super(Forward,self).__init__( other, savelist=False )
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4161:60: E202 whitespace before ')'
        super(Forward,self).__init__( other, savelist=False )
                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4163:20: E201 whitespace after '('
    def __lshift__( self, other ):
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4163:32: E202 whitespace before ')'
    def __lshift__( self, other ):
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4164:23: E201 whitespace after '('
        if isinstance( other, basestring ):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4164:41: E202 whitespace before ')'
        if isinstance( other, basestring ):
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4170:33: E201 whitespace after '('
        self.setWhitespaceChars( self.expr.whiteChars )
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4170:54: E202 whitespace before ')'
        self.setWhitespaceChars( self.expr.whiteChars )
                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4175:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4178:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4179:25: E201 whitespace after '('
    def leaveWhitespace( self ):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4179:30: E202 whitespace before ')'
    def leaveWhitespace( self ):
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4183:20: E201 whitespace after '('
    def streamline( self ):
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4183:25: E202 whitespace before ')'
    def streamline( self ):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4190:18: E201 whitespace after '('
    def validate( self, validateTrace=[] ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4190:41: E202 whitespace before ')'
    def validate( self, validateTrace=[] ):
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4197:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4197:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4198:24: E231 missing whitespace after ','
        if hasattr(self,"name"):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4216:33: E231 missing whitespace after ','
            return super(Forward,self).copy()
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4222:1: E302 expected 2 blank lines, found 1
class _ForwardNoRecurse(Forward):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4223:17: E201 whitespace after '('
    def __str__( self ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4223:22: E202 whitespace before ')'
    def __str__( self ):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4226:1: E302 expected 2 blank lines, found 1
class TokenConverter(ParseElementEnhance):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4230:18: E201 whitespace after '('
    def __init__( self, expr, savelist=False ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4230:45: E202 whitespace before ')'
    def __init__( self, expr, savelist=False ):
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4231:29: E231 missing whitespace after ','
        super(TokenConverter,self).__init__( expr )#, savelist )
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4231:45: E201 whitespace after '('
        super(TokenConverter,self).__init__( expr )#, savelist )
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4231:50: E202 whitespace before ')'
        super(TokenConverter,self).__init__( expr )#, savelist )
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4231:52: E261 at least two spaces before inline comment
        super(TokenConverter,self).__init__( expr )#, savelist )
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4231:52: E262 inline comment should start with '# '
        super(TokenConverter,self).__init__( expr )#, savelist )
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4234:1: E302 expected 2 blank lines, found 1
class Combine(TokenConverter):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4251:18: E201 whitespace after '('
    def __init__( self, expr, joinString="", adjacent=True ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4251:59: E202 whitespace before ')'
    def __init__( self, expr, joinString="", adjacent=True ):
                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4252:22: E231 missing whitespace after ','
        super(Combine,self).__init__( expr )
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4252:38: E201 whitespace after '('
        super(Combine,self).__init__( expr )
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4252:43: E202 whitespace before ')'
        super(Combine,self).__init__( expr )
                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4261:16: E201 whitespace after '('
    def ignore( self, other ):
               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4261:28: E202 whitespace before ')'
    def ignore( self, other ):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4265:19: E201 whitespace after '('
            super( Combine, self).ignore( other )
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4265:42: E201 whitespace after '('
            super( Combine, self).ignore( other )
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4265:48: E202 whitespace before ')'
            super( Combine, self).ignore( other )
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4268:19: E201 whitespace after '('
    def postParse( self, instring, loc, tokenlist ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4268:50: E202 whitespace before ')'
    def postParse( self, instring, loc, tokenlist ):
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4271:34: E201 whitespace after '['
        retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4271:84: E202 whitespace before ']'
        retToks += ParseResults([ "".join(tokenlist._asStringList(self.joinString)) ], modal=self.modalResults)
                                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4274:21: E201 whitespace after '['
            return [ retToks ]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4274:29: E202 whitespace before ']'
            return [ retToks ]
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4278:1: E302 expected 2 blank lines, found 1
class Group(TokenConverter):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4280:121: E501 line too long (135 > 120 characters)
    """
    Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions.

    Example::
        ident = Word(alphas)
        num = Word(nums)
        term = ident | num
        func = ident + Optional(delimitedList(term))
        print(func.parseString("fn a,b,100"))  # -> ['fn', 'a', 'b', '100']

        func = ident + Group(Optional(delimitedList(term)))
        print(func.parseString("fn a,b,100"))  # -> ['fn', ['a', 'b', '100']]
    """

                                                                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4292:18: E201 whitespace after '('
    def __init__( self, expr ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4292:29: E202 whitespace before ')'
    def __init__( self, expr ):
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4293:20: E231 missing whitespace after ','
        super(Group,self).__init__( expr )
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4293:36: E201 whitespace after '('
        super(Group,self).__init__( expr )
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4293:41: E202 whitespace before ')'
        super(Group,self).__init__( expr )
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4296:19: E201 whitespace after '('
    def postParse( self, instring, loc, tokenlist ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4296:50: E202 whitespace before ')'
    def postParse( self, instring, loc, tokenlist ):
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4297:17: E201 whitespace after '['
        return [ tokenlist ]
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4297:27: E202 whitespace before ']'
        return [ tokenlist ]
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4299:1: E302 expected 2 blank lines, found 1
class Dict(TokenConverter):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4312:1: W293 blank line contains whitespace
    """
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())

        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())

        # access named fields as dict entries, or output as dict
        print(result['shape'])
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4315:1: W293 blank line contains whitespace
    """
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())

        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())

        # access named fields as dict entries, or output as dict
        print(result['shape'])
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4319:1: W293 blank line contains whitespace
    """
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())

        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())

        # access named fields as dict entries, or output as dict
        print(result['shape'])
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4321:31: W291 trailing whitespace
    """
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())

        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())

        # access named fields as dict entries, or output as dict
        print(result['shape'])
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    """

                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4335:18: E201 whitespace after '('
    def __init__( self, expr ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4335:29: E202 whitespace before ')'
    def __init__( self, expr ):
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4336:19: E231 missing whitespace after ','
        super(Dict,self).__init__( expr )
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4336:35: E201 whitespace after '('
        super(Dict,self).__init__( expr )
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4336:40: E202 whitespace before ')'
        super(Dict,self).__init__( expr )
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4339:19: E201 whitespace after '('
    def postParse( self, instring, loc, tokenlist ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4339:50: E202 whitespace before ')'
    def postParse( self, instring, loc, tokenlist ):
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4340:14: E231 missing whitespace after ','
        for i,tok in enumerate(tokenlist):
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4344:31: E231 missing whitespace after ','
            if isinstance(ikey,int):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4346:24: E225 missing whitespace around operator
            if len(tok)==1:
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4347:61: E231 missing whitespace after ','
                tokenlist[ikey] = _ParseResultsWithOffset("",i)
                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4348:26: E225 missing whitespace around operator
            elif len(tok)==2 and not isinstance(tok[1],ParseResults):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4348:55: E231 missing whitespace after ','
            elif len(tok)==2 and not isinstance(tok[1],ParseResults):
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4349:65: E231 missing whitespace after ','
                tokenlist[ikey] = _ParseResultsWithOffset(tok[1],i)
                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4351:39: E261 at least two spaces before inline comment
                dictvalue = tok.copy() #ParseResults(i)
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4351:40: E262 inline comment should start with '# '
                dictvalue = tok.copy() #ParseResults(i)
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4353:34: E225 missing whitespace around operator
                if len(dictvalue)!= 1 or (isinstance(dictvalue,ParseResults) and dictvalue.haskeys()):
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4353:63: E231 missing whitespace after ','
                if len(dictvalue)!= 1 or (isinstance(dictvalue,ParseResults) and dictvalue.haskeys()):
                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4354:72: E231 missing whitespace after ','
                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)
                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4356:75: E231 missing whitespace after ','
                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue[0],i)
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4359:21: E201 whitespace after '['
            return [ tokenlist ]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4359:31: E202 whitespace before ']'
            return [ tokenlist ]
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4383:19: E201 whitespace after '('
    def postParse( self, instring, loc, tokenlist ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4383:50: E202 whitespace before ')'
    def postParse( self, instring, loc, tokenlist ):
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4386:18: E201 whitespace after '('
    def suppress( self ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4386:23: E202 whitespace before ')'
    def suppress( self ):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4397:5: E301 expected 1 blank line, found 0
    def __call__(self,s,l,t):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4397:22: E231 missing whitespace after ','
    def __call__(self,s,l,t):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4397:24: E231 missing whitespace after ','
    def __call__(self,s,l,t):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4397:25: E741 ambiguous variable name 'l'
    def __call__(self,s,l,t):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4397:26: E231 missing whitespace after ','
    def __call__(self,s,l,t):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4399:38: E231 missing whitespace after ','
            results = self.callable(s,l,t)
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4399:40: E231 missing whitespace after ','
            results = self.callable(s,l,t)
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4402:31: E231 missing whitespace after ','
        raise ParseException(s,l,"")
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4402:33: E231 missing whitespace after ','
        raise ParseException(s,l,"")
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4403:5: E301 expected 1 blank line, found 0
    def reset(self):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4406:1: E302 expected 2 blank lines, found 1
def traceParseAction(f):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4408:43: W291 trailing whitespace
    """
    Decorator for debugging parse actions.

    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens))))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    """

                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4409:1: W293 blank line contains whitespace
    """
    Decorator for debugging parse actions.

    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens))))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4410:121: E501 line too long (162 > 120 characters)
    """
    Decorator for debugging parse actions.

    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens))))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    """



                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4411:121: E501 line too long (148 > 120 characters)
    """
    Decorator for debugging parse actions.

    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens))))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    """



                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4423:121: E501 line too long (130 > 120 characters)
    """
    Decorator for debugging parse actions.

    When the parse action is called, this decorator will print C{">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})".}
    When the parse action completes, the decorator will print C{"<<"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens))))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    """



                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4428:5: E306 expected 1 blank line before a nested definition, found 0
    def z(*paArgs):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4430:10: E231 missing whitespace after ','
        s,l,t = paArgs[-3:]
         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4430:12: E231 missing whitespace after ','
        s,l,t = paArgs[-3:]
           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4431:23: E225 missing whitespace around operator
        if len(paArgs)>3:
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:26: E201 whitespace after '('
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:76: E231 missing whitespace after ','
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:83: E231 missing whitespace after ','
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:86: E231 missing whitespace after ','
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:88: E231 missing whitespace after ','
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4433:91: E202 whitespace before ')'
        sys.stderr.write( ">>entering %s(line: '%s', %d, %r)\n" % (thisFunc,line(l,s),l,t) )
                                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4437:30: E201 whitespace after '('
            sys.stderr.write( "<<leaving %s (exception: %s)\n" % (thisFunc,exc) )
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4437:75: E231 missing whitespace after ','
            sys.stderr.write( "<<leaving %s (exception: %s)\n" % (thisFunc,exc) )
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4437:80: E202 whitespace before ')'
            sys.stderr.write( "<<leaving %s (exception: %s)\n" % (thisFunc,exc) )
                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4439:26: E201 whitespace after '('
        sys.stderr.write( "<<leaving %s (ret: %r)\n" % (thisFunc,ret) )
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4439:65: E231 missing whitespace after ','
        sys.stderr.write( "<<leaving %s (ret: %r)\n" % (thisFunc,ret) )
                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4439:70: E202 whitespace before ')'
        sys.stderr.write( "<<leaving %s (ret: %r)\n" % (thisFunc,ret) )
                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4450:1: E302 expected 2 blank lines, found 1
def delimitedList( expr, delim=",", combine=False ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4450:19: E201 whitespace after '('
def delimitedList( expr, delim=",", combine=False ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4450:50: E202 whitespace before ')'
def delimitedList( expr, delim=",", combine=False ):
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4465:24: E201 whitespace after '('
        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4465:43: E201 whitespace after '('
        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4465:56: E202 whitespace before ')'
        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4465:58: E202 whitespace before ')'
        return Combine( expr + ZeroOrMore( delim + expr ) ).setName(dlName)
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:17: E201 whitespace after '('
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:36: E201 whitespace after '('
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:46: E201 whitespace after '('
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:52: E202 whitespace before ')'
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:61: E202 whitespace before ')'
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4467:63: E202 whitespace before ')'
        return ( expr + ZeroOrMore( Suppress( delim ) + expr ) ).setName(dlName)
                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4469:1: E302 expected 2 blank lines, found 1
def countedArray( expr, intExpr=None ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4469:18: E201 whitespace after '('
def countedArray( expr, intExpr=None ):
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4469:37: E202 whitespace before ')'
def countedArray( expr, intExpr=None ):
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4476:1: W293 blank line contains whitespace
    """
    Helper to define a counted list of expressions.
    This helper defines a pattern of the form::
        integer expr expr expr...
    where the leading integer tells how many expr expressions follow.
    The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.

    If C{intExpr} is specified, it should be a pyparsing expression that produces an integer value.

    Example::
        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']

        # in this parser, the leading integer value is given in binary,
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4488:5: E306 expected 1 blank line before a nested definition, found 0
    def countFieldParseAction(s,l,t):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4488:32: E231 missing whitespace after ','
    def countFieldParseAction(s,l,t):
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4488:33: E741 ambiguous variable name 'l'
    def countFieldParseAction(s,l,t):
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4488:34: E231 missing whitespace after ','
    def countFieldParseAction(s,l,t):
                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4493:53: E231 missing whitespace after ':'
        intExpr = Word(nums).setParseAction(lambda t:int(t[0]))
                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4498:13: E201 whitespace after '('
    return ( intExpr + arrayExpr ).setName('(len) ' + _ustr(expr) + '...')
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4498:33: E202 whitespace before ')'
    return ( intExpr + arrayExpr ).setName('(len) ' + _ustr(expr) + '...')
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4500:1: E302 expected 2 blank lines, found 1
def _flatten(L):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4503:24: E231 missing whitespace after ','
        if isinstance(i,list):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4509:1: E302 expected 2 blank lines, found 1
def matchPreviousLiteral(expr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4523:5: E306 expected 1 blank line before a nested definition, found 0
    def copyTokenToRepeater(s,l,t):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4523:30: E231 missing whitespace after ','
    def copyTokenToRepeater(s,l,t):
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4523:31: E741 ambiguous variable name 'l'
    def copyTokenToRepeater(s,l,t):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4523:32: E231 missing whitespace after ','
    def copyTokenToRepeater(s,l,t):
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4537:1: E302 expected 2 blank lines, found 1
def matchPreviousExpr(expr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4554:5: E306 expected 1 blank line before a nested definition, found 0
    def copyTokenToRepeater(s,l,t):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4554:30: E231 missing whitespace after ','
    def copyTokenToRepeater(s,l,t):
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4554:31: E741 ambiguous variable name 'l'
    def copyTokenToRepeater(s,l,t):
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4554:32: E231 missing whitespace after ','
    def copyTokenToRepeater(s,l,t):
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4556:9: E306 expected 1 blank line before a nested definition, found 0
        def mustMatchTheseTokens(s,l,t):
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4556:35: E231 missing whitespace after ','
        def mustMatchTheseTokens(s,l,t):
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4556:36: E741 ambiguous variable name 'l'
        def mustMatchTheseTokens(s,l,t):
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4556:37: E231 missing whitespace after ','
        def mustMatchTheseTokens(s,l,t):
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4558:15: E271 multiple spaces after keyword
            if  theseTokens != matchTokens:
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4559:40: E231 missing whitespace after ','
                raise ParseException("",0,"")
                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4559:42: E231 missing whitespace after ','
                raise ParseException("",0,"")
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4560:28: E201 whitespace after '('
        rep.setParseAction( mustMatchTheseTokens, callDuringTry=True )
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4560:69: E202 whitespace before ')'
        rep.setParseAction( mustMatchTheseTokens, callDuringTry=True )
                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4565:1: E302 expected 2 blank lines, found 1
def _escapeRegexRangeChars(s):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4566:5: E265 block comment should start with '# '
    #~  escape these chars: ^-]
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4568:24: E231 missing whitespace after ','
        s = s.replace(c,_bslash+c)
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4569:23: E231 missing whitespace after ','
    s = s.replace("\n",r"\n")
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4570:23: E231 missing whitespace after ','
    s = s.replace("\t",r"\t")
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4573:1: C901 'oneOf' is too complex (13)
def oneOf( strs, caseless=False, useRegex=True ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4573:1: E302 expected 2 blank lines, found 1
def oneOf( strs, caseless=False, useRegex=True ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4573:11: E201 whitespace after '('
def oneOf( strs, caseless=False, useRegex=True ):
          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4573:47: E202 whitespace before ')'
def oneOf( strs, caseless=False, useRegex=True ):
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4597:20: E201 whitespace after '('
        isequal = ( lambda a,b: a.upper() == b.upper() )
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4597:29: E231 missing whitespace after ','
        isequal = ( lambda a,b: a.upper() == b.upper() )
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4597:55: E202 whitespace before ')'
        isequal = ( lambda a,b: a.upper() == b.upper() )
                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4598:18: E201 whitespace after '('
        masks = ( lambda a,b: b.upper().startswith(a.upper()) )
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4598:27: E231 missing whitespace after ','
        masks = ( lambda a,b: b.upper().startswith(a.upper()) )
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4598:62: E202 whitespace before ')'
        masks = ( lambda a,b: b.upper().startswith(a.upper()) )
                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4601:20: E201 whitespace after '('
        isequal = ( lambda a,b: a == b )
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4601:29: E231 missing whitespace after ','
        isequal = ( lambda a,b: a == b )
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4601:39: E202 whitespace before ')'
        isequal = ( lambda a,b: a == b )
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4602:18: E201 whitespace after '('
        masks = ( lambda a,b: b.startswith(a) )
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4602:27: E231 missing whitespace after ','
        masks = ( lambda a,b: b.startswith(a) )
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4602:46: E202 whitespace before ')'
        masks = ( lambda a,b: b.startswith(a) )
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4606:23: E231 missing whitespace after ','
    if isinstance(strs,basestring):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4612:17: E128 continuation line under-indented for visual indent
                SyntaxWarning, stacklevel=2)
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4619:14: E231 missing whitespace after ','
        for j,other in enumerate(symbols[i+1:]):
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4620:17: E201 whitespace after '('
            if ( isequal(other, cur) ):
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4620:37: E202 whitespace before ')'
            if ( isequal(other, cur) ):
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4623:19: E201 whitespace after '('
            elif ( masks(cur, other) ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4623:37: E202 whitespace before ')'
            elif ( masks(cur, other) ):
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4625:33: E231 missing whitespace after ','
                symbols.insert(i,other)
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4632:9: E265 block comment should start with '# '
        #~ print (strs,"->", "|".join( [ _escapeRegexChars(sym) for sym in symbols] ))
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4634:28: E225 missing whitespace around operator
            if len(symbols)==len("".join(symbols)):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4635:30: E201 whitespace after '('
                return Regex( "[%s]" % "".join(_escapeRegexRangeChars(sym) for sym in symbols) ).setName(' | '.join(symbols))
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4635:95: E202 whitespace before ')'
                return Regex( "[%s]" % "".join(_escapeRegexRangeChars(sym) for sym in symbols) ).setName(' | '.join(symbols))
                                                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4635:121: E501 line too long (125 > 120 characters)
                return Regex( "[%s]" % "".join(_escapeRegexRangeChars(sym) for sym in symbols) ).setName(' | '.join(symbols))
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4637:30: E201 whitespace after '('
                return Regex( "|".join(re.escape(sym) for sym in symbols) ).setName(' | '.join(symbols))
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4637:74: E202 whitespace before ')'
                return Regex( "|".join(re.escape(sym) for sym in symbols) ).setName(' | '.join(symbols))
                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4640:21: E128 continuation line under-indented for visual indent
                    SyntaxWarning, stacklevel=2)
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4643:5: E303 too many blank lines (2)
    # last resort, just use MatchFirst
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4646:1: E302 expected 2 blank lines, found 1
def dictOf( key, value ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4646:12: E201 whitespace after '('
def dictOf( key, value ):
           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4646:23: E202 whitespace before ')'
def dictOf( key, value ):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4659:1: W293 blank line contains whitespace
    """
    Helper to easily and clearly define a dictionary by specifying the respective patterns
    for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
    in the proper order.  The key pattern can include delimiting markers or punctuation,
    as long as they are suppressed, thereby leaving the significant key text.  The value
    pattern can include named results, so that the C{Dict} results can include named token
    fields.

    Example::
        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        print(OneOrMore(attr_expr).parseString(text).dump())

        attr_label = label
        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)

        # similar to Dict, but simpler call format
        result = dictOf(attr_label, attr_value).parseString(text)
        print(result.dump())
        print(result['shape'])
        print(result.shape)  # object attribute access works too
        print(result.asDict())
    prints::
        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        SQUARE
        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:17: E201 whitespace after '('
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:29: E201 whitespace after '('
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:35: E211 whitespace before '('
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:37: E201 whitespace after '('
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:49: E202 whitespace before ')'
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:51: E202 whitespace before ')'
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4679:53: E202 whitespace before ')'
    return Dict( ZeroOrMore( Group ( key + value ) ) )
                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4681:1: E302 expected 2 blank lines, found 1
def originalTextFor(expr, asString=True):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4686:81: W291 trailing whitespace
    """
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.

    If the optional C{asString} argument is passed as C{False}, then the return value is a
    C{L{ParseResults}} containing any results names that were originally matched, and a
    single token containing the original matched text from the input string.  So if
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    """

                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4687:1: W293 blank line contains whitespace
    """
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.

    If the optional C{asString} argument is passed as C{False}, then the return value is a
    C{L{ParseResults}} containing any results names that were originally matched, and a
    single token containing the original matched text from the input string.  So if
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4688:91: W291 trailing whitespace
    """
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.

    If the optional C{asString} argument is passed as C{False}, then the return value is a
    C{L{ParseResults}} containing any results names that were originally matched, and a
    single token containing the original matched text from the input string.  So if
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    """

                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4689:88: W291 trailing whitespace
    """
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.

    If the optional C{asString} argument is passed as C{False}, then the return value is a
    C{L{ParseResults}} containing any results names that were originally matched, and a
    single token containing the original matched text from the input string.  So if
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    """

                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4690:84: W291 trailing whitespace
    """
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.

    If the optional C{asString} argument is passed as C{False}, then the return value is a
    C{L{ParseResults}} containing any results names that were originally matched, and a
    single token containing the original matched text from the input string.  So if
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = "this is test <b> bold <i>text</i> </b> normal text "
        for tag in ("b","i"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    """

                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4705:48: E231 missing whitespace after ','
    locMarker = Empty().setParseAction(lambda s,loc,t: loc)
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4705:52: E231 missing whitespace after ','
    locMarker = Empty().setParseAction(lambda s,loc,t: loc)
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4710:9: E731 do not assign a lambda expression, use a def
        extractText = lambda s,l,t: s[t._original_start:t._original_end]
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4710:31: E231 missing whitespace after ','
        extractText = lambda s,l,t: s[t._original_start:t._original_end]
                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4710:32: E741 ambiguous variable name 'l'
        extractText = lambda s,l,t: s[t._original_start:t._original_end]
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4710:33: E231 missing whitespace after ','
        extractText = lambda s,l,t: s[t._original_start:t._original_end]
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4712:26: E231 missing whitespace after ','
        def extractText(s,l,t):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4712:27: E741 ambiguous variable name 'l'
        def extractText(s,l,t):
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4712:28: E231 missing whitespace after ','
        def extractText(s,l,t):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4718:1: E302 expected 2 blank lines, found 1
def ungroup(expr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4718:19: W291 trailing whitespace
def ungroup(expr):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4723:56: E231 missing whitespace after ':'
    return TokenConverter(expr).setParseAction(lambda t:t[0])
                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4725:1: E302 expected 2 blank lines, found 1
def locatedExpr(expr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4745:46: E231 missing whitespace after ','
    locator = Empty().setParseAction(lambda s,l,t: l)
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4745:47: E741 ambiguous variable name 'l'
    locator = Empty().setParseAction(lambda s,l,t: l)
                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4745:48: E231 missing whitespace after ','
    locator = Empty().setParseAction(lambda s,l,t: l)
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4750:6: E221 multiple spaces before operator
empty       = Empty().setName("empty")
     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4751:10: E221 multiple spaces before operator
lineStart   = LineStart().setName("lineStart")
         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4752:8: E221 multiple spaces before operator
lineEnd     = LineEnd().setName("lineEnd")
       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4754:10: E221 multiple spaces before operator
stringEnd   = StringEnd().setName("stringEnd")
         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:21: E201 whitespace after '('
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:57: E202 whitespace before ')'
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:83: E231 missing whitespace after ','
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:84: E741 ambiguous variable name 'l'
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:85: E231 missing whitespace after ','
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4756:87: E231 missing whitespace after ':'
_escapedPunc = Word( _bslash, r"\[]-*.$+^?()~ ", exact=2 ).setParseAction(lambda s,l,t:t[0][1])
                                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4757:73: E231 missing whitespace after ','
_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4757:74: E741 ambiguous variable name 'l'
_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4757:75: E231 missing whitespace after ','
_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4757:77: E231 missing whitespace after ':'
_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
                                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4757:108: E231 missing whitespace after ','
_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s,l,t:unichr(int(t[0].lstrip(r'\0x'),16)))
                                                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4758:62: E231 missing whitespace after ','
_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4758:63: E741 ambiguous variable name 'l'
_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4758:64: E231 missing whitespace after ','
_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4758:66: E231 missing whitespace after ':'
_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4758:86: E231 missing whitespace after ','
_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s,l,t:unichr(int(t[0][1:],8)))
                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4761:80: E201 whitespace after '('
_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4761:91: E201 whitespace after '('
_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
                                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4761:116: E202 whitespace before ')'
_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
                                                                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4761:118: E202 whitespace before ')'
_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
                                                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4761:121: E501 line too long (148 > 120 characters)
_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group( OneOrMore( _charRange | _singleChar ) ).setResultsName("body") + "]"
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4763:1: E302 expected 2 blank lines, found 1
def srange(s):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4775:94: W291 trailing whitespace
    r"""
    Helper to easily define string ranges for use in Word construction.  Borrows
    syntax from regexp '[]' string range definitions::
        srange("[0-9]")   -> "0123456789"
        srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
        srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
    The input string must be enclosed in []'s, and the returned string is the expanded
    character set joined into a single string.
    The values enclosed in the []'s may be:
     - a single character
     - an escaped character with a leading backslash (such as C{\-} or C{\]})
     - an escaped hex character with a leading C{'\x'} (C{\x21}, which is a C{'!'} character)
         (C{\0x##} is also supported for backwards compatibility)
     - an escaped octal character with a leading C{'\0'} (C{\041}, which is a C{'!'} character)
     - a range of any of the above, separated by a dash (C{'a-z'}, etc.)
     - any combination of the above (C{'aeiouy'}, C{'a-zA-Z0-9_$'}, etc.)
    """


   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4776:66: W291 trailing whitespace
    r"""
    Helper to easily define string ranges for use in Word construction.  Borrows
    syntax from regexp '[]' string range definitions::
        srange("[0-9]")   -> "0123456789"
        srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
        srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
    The input string must be enclosed in []'s, and the returned string is the expanded
    character set joined into a single string.
    The values enclosed in the []'s may be:
     - a single character
     - an escaped character with a leading backslash (such as C{\-} or C{\]})
     - an escaped hex character with a leading C{'\x'} (C{\x21}, which is a C{'!'} character)
         (C{\0x##} is also supported for backwards compatibility)
     - an escaped octal character with a leading C{'\0'} (C{\041}, which is a C{'!'} character)
     - a range of any of the above, separated by a dash (C{'a-z'}, etc.)
     - any combination of the above (C{'aeiouy'}, C{'a-zA-Z0-9_$'}, etc.)
    """

                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4781:5: E731 do not assign a lambda expression, use a def
    _expanded = lambda p: p if not isinstance(p,ParseResults) else ''.join(unichr(c) for c in range(ord(p[0]),ord(p[1])+1))
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4781:48: E231 missing whitespace after ','
    _expanded = lambda p: p if not isinstance(p,ParseResults) else ''.join(unichr(c) for c in range(ord(p[0]),ord(p[1])+1))
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4781:110: E231 missing whitespace after ','
    _expanded = lambda p: p if not isinstance(p,ParseResults) else ''.join(unichr(c) for c in range(ord(p[0]),ord(p[1])+1))
                                                                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4781:121: E501 line too long (123 > 120 characters)
    _expanded = lambda p: p if not isinstance(p,ParseResults) else ''.join(unichr(c) for c in range(ord(p[0]),ord(p[1])+1))
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4787:1: E302 expected 2 blank lines, found 1
def matchOnlyAtCol(n):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4792:23: E231 missing whitespace after ','
    def verifyCol(strg,locn,toks):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4792:28: E231 missing whitespace after ','
    def verifyCol(strg,locn,toks):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4793:20: E231 missing whitespace after ','
        if col(locn,strg) != n:
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4794:38: E231 missing whitespace after ','
            raise ParseException(strg,locn,"matched token not at column %d" % n)
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4794:43: E231 missing whitespace after ','
            raise ParseException(strg,locn,"matched token not at column %d" % n)
                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4797:1: E302 expected 2 blank lines, found 1
def replaceWith(replStr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4806:1: W293 blank line contains whitespace
    """
    Helper method for common parse actions that simply return a literal value.  Especially
    useful when used with C{L{transformString<ParserElement.transformString>}()}.

    Example::
        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
        na = oneOf("N/A NA").setParseAction(replaceWith(math.nan))
        term = na | num

        OneOrMore(term).parseString("324 234 N/A 234") # -> [324, 234, nan, 234]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4809:20: E231 missing whitespace after ','
    return lambda s,l,t: [replStr]
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4809:21: E741 ambiguous variable name 'l'
    return lambda s,l,t: [replStr]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4809:22: E231 missing whitespace after ','
    return lambda s,l,t: [replStr]
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4811:1: E302 expected 2 blank lines, found 1
def removeQuotes(s,l,t):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4811:19: E231 missing whitespace after ','
def removeQuotes(s,l,t):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4811:20: E741 ambiguous variable name 'l'
def removeQuotes(s,l,t):
                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4811:21: E231 missing whitespace after ','
def removeQuotes(s,l,t):
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4825:1: E302 expected 2 blank lines, found 1
def tokenMap(func, *args):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4827:115: W291 trailing whitespace
    """
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')

        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    """

                                                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4837:1: W293 blank line contains whitespace
    """
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')

        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4857:13: E231 missing whitespace after ','
    def pa(s,l,t):
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4857:14: E741 ambiguous variable name 'l'
    def pa(s,l,t):
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4857:15: E231 missing whitespace after ','
    def pa(s,l,t):
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4861:46: W291 trailing whitespace
        func_name = getattr(func, '__name__',
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4869:1: E305 expected 2 blank lines after class or function definition, found 1
upcaseTokens = tokenMap(lambda t: _ustr(t).upper())
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4870:121: E501 line too long (127 > 120 characters)
"""(Deprecated) Helper parse action to convert tokens to upper case. Deprecated in favor of L{pyparsing_common.upcaseTokens}"""
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4873:121: E501 line too long (129 > 120 characters)
"""(Deprecated) Helper parse action to convert tokens to lower case. Deprecated in favor of L{pyparsing_common.downcaseTokens}"""
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4874:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4875:1: E302 expected 2 blank lines, found 1
def _makeTags(tagStr, xml):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4877:25: E231 missing whitespace after ','
    if isinstance(tagStr,basestring):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4883:30: E231 missing whitespace after ','
    tagAttrName = Word(alphas,alphanums+"_-:")
                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4885:62: E201 whitespace after '('
        tagAttrValue = dblQuotedString.copy().setParseAction( removeQuotes )
                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4885:75: E202 whitespace before ')'
        tagAttrValue = dblQuotedString.copy().setParseAction( removeQuotes )
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4887:17: E127 continuation line over-indented for visual indent
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4887:39: E201 whitespace after '('
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4887:82: E202 whitespace before ')'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:17: E127 continuation line over-indented for visual indent
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:29: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:94: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:95: E741 ambiguous variable name 'l'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:96: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:98: E231 missing whitespace after ':'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:103: E225 missing whitespace around operator
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4888:121: E501 line too long (124 > 120 characters)
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName + Suppress("=") + tagAttrValue ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4891:59: E201 whitespace after '('
        tagAttrValue = quotedString.copy().setParseAction( removeQuotes ) | Word(printablesLessRAbrack)
                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4891:72: E202 whitespace before ')'
        tagAttrValue = quotedString.copy().setParseAction( removeQuotes ) | Word(printablesLessRAbrack)
                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4893:17: E127 continuation line over-indented for visual indent
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4893:39: E201 whitespace after '('
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4893:85: E502 the backslash is redundant between brackets
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4894:17: E128 continuation line under-indented for visual indent
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4894:26: E201 whitespace after '('
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4894:55: E202 whitespace before ')'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4894:57: E202 whitespace before ')'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:17: E127 continuation line over-indented for visual indent
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:29: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:94: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:95: E741 ambiguous variable name 'l'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:96: E231 missing whitespace after ','
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:98: E231 missing whitespace after ':'
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:103: E225 missing whitespace around operator
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4895:121: E501 line too long (124 > 120 characters)
        openTag = Suppress("<") + tagStr("tag") + \
                Dict(ZeroOrMore(Group( tagAttrName.setParseAction(downcaseTokens) + \
                Optional( Suppress("=") + tagAttrValue ) ))) + \
                Optional("/",default=[False]).setResultsName("empty").setParseAction(lambda s,l,t:t[0]=='/') + Suppress(">")

                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4898:73: E231 missing whitespace after ','
    openTag = openTag.setResultsName("start"+"".join(resname.replace(":"," ").title().split())).setName("<%s>" % resname)
                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4898:121: E501 line too long (121 > 120 characters)
    openTag = openTag.setResultsName("start"+"".join(resname.replace(":"," ").title().split())).setName("<%s>" % resname)
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4899:73: E231 missing whitespace after ','
    closeTag = closeTag.setResultsName("end"+"".join(resname.replace(":"," ").title().split())).setName("</%s>" % resname)
                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4899:121: E501 line too long (122 > 120 characters)
    closeTag = closeTag.setResultsName("end"+"".join(resname.replace(":"," ").title().split())).setName("</%s>" % resname)
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4904:1: E302 expected 2 blank lines, found 1
def makeHTMLTags(tagStr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4914:1: W293 blank line contains whitespace
    """
    Helper to construct opening and closing tag expressions for HTML, given a tag name. Matches
    tags in either upper or lower case, attributes with namespaces and with quoted or unquoted values.

    Example::
        text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
        # makeHTMLTags returns pyparsing expressions for the opening and closing tags as a 2-tuple
        a,a_end = makeHTMLTags("A")
        link_expr = a + SkipTo(a_end)("link_text") + a_end

        for link in link_expr.searchString(text):
            # attributes in the <A> tag (like "href" shown here) are also accessible as named results
            print(link.link_text, '->', link.href)
    prints::
        pyparsing -> http://pyparsing.wikispaces.com
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4921:22: E201 whitespace after '('
    return _makeTags( tagStr, False )
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4921:36: E202 whitespace before ')'
    return _makeTags( tagStr, False )
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4923:1: E302 expected 2 blank lines, found 1
def makeXMLTags(tagStr):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4930:22: E201 whitespace after '('
    return _makeTags( tagStr, True )
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4930:35: E202 whitespace before ')'
    return _makeTags( tagStr, True )
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4932:1: E302 expected 2 blank lines, found 1
def withAttribute(*args,**attrDict):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4932:24: E231 missing whitespace after ','
def withAttribute(*args,**attrDict):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4947:1: W293 blank line contains whitespace
    """
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align="right")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{"class":"Customer", "align":"right"}}
     - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.

    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type="grid">1 4 0 1 0</div>
            <div type="graph">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")

        # only match div tag having a type attribute with value "grid"
        div_grid = div().setParseAction(withAttribute(type="grid"))
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4961:1: W293 blank line contains whitespace
    """
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align="right")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{"class":"Customer", "align":"right"}}
     - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.

    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type="grid">1 4 0 1 0</div>
            <div type="graph">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")

        # only match div tag having a type attribute with value "grid"
        div_grid = div().setParseAction(withAttribute(type="grid"))
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4970:1: W293 blank line contains whitespace
    """
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align="right")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{"class":"Customer", "align":"right"}}
     - a list of name-value tuples, as in ( ("ns1:class", "Customer"), ("ns2:align","right") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.

    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type="grid">1 4 0 1 0</div>
            <div type="graph">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")

        # only match div tag having a type attribute with value "grid"
        div_grid = div().setParseAction(withAttribute(type="grid"))
        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4986:16: E231 missing whitespace after ','
    attrs = [(k,v) for k,v in attrs]
               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4986:25: E231 missing whitespace after ','
    attrs = [(k,v) for k,v in attrs]
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4987:5: E306 expected 1 blank line before a nested definition, found 0
    def pa(s,l,tokens):
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4987:13: E231 missing whitespace after ','
    def pa(s,l,tokens):
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4987:14: E741 ambiguous variable name 'l'
    def pa(s,l,tokens):
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4987:15: E231 missing whitespace after ','
    def pa(s,l,tokens):
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4988:21: E231 missing whitespace after ','
        for attrName,attrValue in attrs:
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4990:39: E231 missing whitespace after ','
                raise ParseException(s,l,"no matching attribute " + attrName)
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4990:41: E231 missing whitespace after ','
                raise ParseException(s,l,"no matching attribute " + attrName)
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4992:39: E231 missing whitespace after ','
                raise ParseException(s,l,"attribute '%s' has value '%s', must be '%s'" %
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4992:41: E231 missing whitespace after ','
                raise ParseException(s,l,"attribute '%s' has value '%s', must be '%s'" %
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4993:45: E127 continuation line over-indented for visual indent
                                            (attrName, tokens[attrName], attrValue))
                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4995:1: E305 expected 2 blank lines after class or function definition, found 0
withAttribute.ANY_VALUE = object()
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:4997:1: E302 expected 2 blank lines, found 1
def withClass(classname, namespace=''):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5010:1: W293 blank line contains whitespace
    """
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class="grid">1 4 0 1 0</div>
            <div class="graph">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")
        div_grid = div().setParseAction(withClass("grid"))

        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5014:1: W293 blank line contains whitespace
    """
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class="grid">1 4 0 1 0</div>
            <div class="graph">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")
        div_grid = div().setParseAction(withClass("grid"))

        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5018:1: W293 blank line contains whitespace
    """
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class="grid">1 4 0 1 0</div>
            <div class="graph">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>

        '''
        div,div_end = makeHTMLTags("div")
        div_grid = div().setParseAction(withClass("grid"))

        grid_expr = div_grid + SkipTo(div | div_end)("body")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)

        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)("body")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5030:38: E203 whitespace before ':'
    return withAttribute(**{classattr : classname})
                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5030:52: W291 trailing whitespace
    return withAttribute(**{classattr : classname})
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5032:1: E305 expected 2 blank lines after class or function definition, found 1
opAssoc = _Constants()
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5036:1: C901 'infixNotation' is too complex (17)
def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5036:1: E302 expected 2 blank lines, found 1
def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5036:19: E201 whitespace after '('
def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5036:76: E202 whitespace before ')'
def infixNotation( baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')') ):
                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5041:78: W291 trailing whitespace
    """
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use
    of parentheses to override operator precedences (see example below).

    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier

        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])

        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    """

                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5043:1: W293 blank line contains whitespace
    """
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use
    of parentheses to override operator precedences (see example below).

    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier

        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])

        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5073:46: W291 trailing whitespace
    """
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use
    of parentheses to override operator precedences (see example below).

    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier

        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])

        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    """

                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5074:1: W293 blank line contains whitespace
    """
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use
    of parentheses to override operator precedences (see example below).

    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier

        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])

        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5081:1: W293 blank line contains whitespace
    """
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use
    of parentheses to override operator precedences (see example below).

    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier

        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])

        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5098:28: E201 whitespace after '('
    lastExpr = baseExpr | ( lpar + ret + rpar )
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5098:46: E202 whitespace before ')'
    lastExpr = baseExpr | ( lpar + ret + rpar )
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5099:10: E231 missing whitespace after ','
    for i,operDef in enumerate(opList):
         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5100:15: E231 missing whitespace after ','
        opExpr,arity,rightLeftAssoc,pa = (operDef + (None,))[:4]
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5100:21: E231 missing whitespace after ','
        opExpr,arity,rightLeftAssoc,pa = (operDef + (None,))[:4]
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5100:36: E231 missing whitespace after ','
        opExpr,arity,rightLeftAssoc,pa = (operDef + (None,))[:4]
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5109:67: E201 whitespace after '('
                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5109:89: E201 whitespace after '('
                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5109:96: E202 whitespace before ')'
                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
                                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5109:98: E202 whitespace before ')'
                matchExpr = FollowedBy(lastExpr + opExpr) + Group( lastExpr + OneOrMore( opExpr ) )
                                                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5112:82: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
                                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5112:104: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
                                                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5112:121: E501 line too long (125 > 120 characters)
                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5112:122: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
                                                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5112:124: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + opExpr + lastExpr) + Group( lastExpr + OneOrMore( opExpr + lastExpr ) )
                                                                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5114:71: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr+lastExpr) + Group( lastExpr + OneOrMore(lastExpr) )
                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5114:102: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr+lastExpr) + Group( lastExpr + OneOrMore(lastExpr) )
                                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5117:35: E201 whitespace after '('
                matchExpr = FollowedBy(lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr) + \
                            Group( lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr )
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5117:86: E202 whitespace before ')'
                matchExpr = FollowedBy(lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr) + \
                            Group( lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr )
                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5125:72: E201 whitespace after '('
                matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5125:90: E202 whitespace before ')'
                matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5128:82: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
                                                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5128:104: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
                                                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5128:121: E501 line too long (125 > 120 characters)
                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5128:122: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
                                                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5128:124: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + opExpr + thisExpr) + Group( lastExpr + OneOrMore( opExpr + thisExpr ) )
                                                                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5130:73: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5130:95: E201 whitespace after '('
                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
                                                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5130:104: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
                                                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5130:106: E202 whitespace before ')'
                    matchExpr = FollowedBy(lastExpr + thisExpr) + Group( lastExpr + OneOrMore( thisExpr ) )
                                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5133:35: E201 whitespace after '('
                matchExpr = FollowedBy(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr) + \
                            Group( lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr )
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5133:86: E202 whitespace before ')'
                matchExpr = FollowedBy(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr) + \
                            Group( lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr )
                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5143:23: E201 whitespace after '('
        thisExpr <<= ( matchExpr.setName(termName) | lastExpr )
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5143:62: E202 whitespace before ')'
        thisExpr <<= ( matchExpr.setName(termName) | lastExpr )
                                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5148:1: E305 expected 2 blank lines after class or function definition, found 1
operatorPrecedence = infixNotation
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5151:121: E501 line too long (137 > 120 characters)
dblQuotedString = Combine(Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*')+'"').setName("string enclosed in double quotes")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5152:121: E501 line too long (137 > 120 characters)
sglQuotedString = Combine(Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*")+"'").setName("string enclosed in single quotes")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5153:90: E225 missing whitespace around operator
quotedString = Combine(Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*')+'"'|
                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5154:121: E501 line too long (144 > 120 characters)
                       Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*")+"'").setName("quotedString using single or double quotes")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5157:1: E302 expected 2 blank lines, found 1
def nestedExpr(opener="(", closer=")", content=None, ignoreExpr=quotedString.copy()):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5189:45: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5191:79: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5194:1: W293 blank line contains whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5196:32: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5197:30: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5199:1: W293 blank line contains whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5200:41: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5201:52: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5202:50: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5203:25: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5205:18: W291 trailing whitespace
    """
    Helper method for defining nested lists enclosed in opening and closing
    delimiters ("(" and ")" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{"("}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{")"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf("void int short long char float double")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, "()")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type("type")
                      + ident("name")
                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
                      + code_body("body"))
        c_function.ignore(cStyleComment)

        source_code = '''
            int is_odd(int x) {
                return (x%2);
            }

            int dec_to_hex(char hchar) {
                if (hchar >= '0' && hchar <= '9') {
                    return (ord(hchar)-ord('0'));
                } else {
                    return (10+ord(hchar)-ord('A'));
                }
            }
        '''
        for func in c_function.searchString(source_code):
            print("%(name)s (%(type)s) args: %(args)s" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    """

         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5218:29: E231 missing whitespace after ','
        if isinstance(opener,basestring) and isinstance(closer,basestring):
                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5218:63: E231 missing whitespace after ','
        if isinstance(opener,basestring) and isinstance(closer,basestring):
                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5219:48: E225 missing whitespace around operator
            if len(opener) == 1 and len(closer)==1:
                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5222:37: E128 continuation line under-indented for visual indent
                                    CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS,exact=1))
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5222:95: E231 missing whitespace after ','
                                    CharsNotIn(opener+closer+ParserElement.DEFAULT_WHITE_CHARS,exact=1))
                                                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5223:58: E231 missing whitespace after ':'
                                ).setParseAction(lambda t:t[0].strip()))
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5226:33: E124 closing bracket does not match visual indentation
                                ).setParseAction(lambda t:t[0].strip()))
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5226:58: E231 missing whitespace after ':'
                                ).setParseAction(lambda t:t[0].strip()))
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5229:63: W291 trailing whitespace
                    content = (Combine(OneOrMore(~ignoreExpr +
                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5230:37: E128 continuation line under-indented for visual indent
                                    ~Literal(opener) + ~Literal(closer) +
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5231:81: E231 missing whitespace after ','
                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
                                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5232:58: E231 missing whitespace after ':'
                                ).setParseAction(lambda t:t[0].strip()))
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5235:37: E128 continuation line under-indented for visual indent
                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5235:81: E231 missing whitespace after ','
                                    CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS,exact=1))
                                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5236:58: E231 missing whitespace after ':'
                                ).setParseAction(lambda t:t[0].strip()))
                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5241:23: E201 whitespace after '('
        ret <<= Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5241:54: E201 whitespace after '('
        ret <<= Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5241:81: E202 whitespace before ')'
        ret <<= Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
                                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5241:102: E202 whitespace before ')'
        ret <<= Group( Suppress(opener) + ZeroOrMore( ignoreExpr | ret | content ) + Suppress(closer) )
                                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5243:23: E201 whitespace after '('
        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5243:54: E201 whitespace after '('
        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5243:68: E202 whitespace before ')'
        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
                                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5243:70: E221 multiple spaces before operator
        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5243:90: E202 whitespace before ')'
        ret <<= Group( Suppress(opener) + ZeroOrMore( ret | content )  + Suppress(closer) )
                                                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5244:51: E231 missing whitespace after ','
    ret.setName('nested %s%s expression' % (opener,closer))
                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5247:1: C901 'indentedBlock' is too complex (11)
def indentedBlock(blockStatementExpr, indentStack, indent=True):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5247:1: E302 expected 2 blank lines, found 1
def indentedBlock(blockStatementExpr, indentStack, indent=True):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5323:66: W291 trailing whitespace
    """
    Helper method for defining space-delimited indentation blocks, such as
    those used to define block statements in Python source code.

    Parameters:
     - blockStatementExpr - expression defining syntax of statement that
            is repeated within the indented block
     - indentStack - list created by caller to manage indentation stack
            (multiple statementWithIndentedBlock expressions within a single grammar
            should share a common indentStack)
     - indent - boolean indicating whether block must be indented beyond the
            the current level; set to False for block of left-most statements
            (default=C{True})

    A valid block must contain at least one C{blockStatement}.

    Example::
        data = '''
        def A(z):
          A1
          B = 100
          G = A2
          A2
          A3
        B
        def BB(a,b,c):
          BB1
          def BBA():
            bba1
            bba2
            bba3
        C
        D
        def spam(x,y):
             def eggs(z):
                 pass
        '''


        indentStack = [1]
        stmt = Forward()

        identifier = Word(alphas, alphanums)
        funcDecl = ("def" + identifier + Group( "(" + Optional( delimitedList(identifier) ) + ")" ) + ":")
        func_body = indentedBlock(stmt, indentStack)
        funcDef = Group( funcDecl + func_body )

        rvalue = Forward()
        funcCall = Group(identifier + "(" + Optional(delimitedList(rvalue)) + ")")
        rvalue << (funcCall | identifier | Word(nums))
        assignment = Group(identifier + "=" + rvalue)
        stmt << ( funcDef | assignment | identifier )

        module_body = OneOrMore(stmt)

        parseTree = module_body.parseString(data)
        parseTree.pprint()
    prints::
        [['def',
          'A',
          ['(', 'z', ')'],
          ':',
          [['A1'], [['B', '=', '100']], [['G', '=', 'A2']], ['A2'], ['A3']]],
         'B',
         ['def',
          'BB',
          ['(', 'a', 'b', 'c', ')'],
          ':',
          [['BB1'], [['def', 'BBA', ['(', ')'], ':', [['bba1'], ['bba2'], ['bba3']]]]]],
         'C',
         'D',
         ['def',
          'spam',
          ['(', 'x', 'y', ')'],
          ':',
          [[['def', 'eggs', ['(', 'z', ')'], ':', [['pass']]]]]]]
    """

                                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5325:26: E231 missing whitespace after ','
    def checkPeerIndent(s,l,t):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5325:27: E741 ambiguous variable name 'l'
    def checkPeerIndent(s,l,t):
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5325:28: E231 missing whitespace after ','
    def checkPeerIndent(s,l,t):
                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5326:23: E701 multiple statements on one line (colon)
        if l >= len(s): return
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5327:23: E231 missing whitespace after ','
        curCol = col(l,s)
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5330:44: E231 missing whitespace after ','
                raise ParseFatalException(s,l,"illegal nesting")
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5330:46: E231 missing whitespace after ','
                raise ParseFatalException(s,l,"illegal nesting")
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5331:35: E231 missing whitespace after ','
            raise ParseException(s,l,"not a peer entry")
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5331:37: E231 missing whitespace after ','
            raise ParseException(s,l,"not a peer entry")
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5333:25: E231 missing whitespace after ','
    def checkSubIndent(s,l,t):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5333:26: E741 ambiguous variable name 'l'
    def checkSubIndent(s,l,t):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5333:27: E231 missing whitespace after ','
    def checkSubIndent(s,l,t):
                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5334:23: E231 missing whitespace after ','
        curCol = col(l,s)
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5336:32: E201 whitespace after '('
            indentStack.append( curCol )
                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5336:39: E202 whitespace before ')'
            indentStack.append( curCol )
                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5338:35: E231 missing whitespace after ','
            raise ParseException(s,l,"not a subentry")
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5338:37: E231 missing whitespace after ','
            raise ParseException(s,l,"not a subentry")
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5340:24: E231 missing whitespace after ','
    def checkUnindent(s,l,t):
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5340:25: E741 ambiguous variable name 'l'
    def checkUnindent(s,l,t):
                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5340:26: E231 missing whitespace after ','
    def checkUnindent(s,l,t):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5341:23: E701 multiple statements on one line (colon)
        if l >= len(s): return
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5342:23: E231 missing whitespace after ','
        curCol = col(l,s)
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5343:15: E275 missing whitespace after keyword
        if not(indentStack and curCol < indentStack[-1] and curCol <= indentStack[-2]):
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5344:35: E231 missing whitespace after ','
            raise ParseException(s,l,"not an unindent")
                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5344:37: E231 missing whitespace after ','
            raise ParseException(s,l,"not an unindent")
                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5349:9: E221 multiple spaces before operator
    PEER   = Empty().setParseAction(checkPeerIndent).setName('')
        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5352:24: E201 whitespace after '('
        smExpr = Group( Optional(NL) +
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5353:13: E128 continuation line under-indented for visual indent
            #~ FollowedBy(blockStatementExpr) +
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5353:13: E265 block comment should start with '# '
            #~ FollowedBy(blockStatementExpr) +
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5354:13: E128 continuation line under-indented for visual indent
            INDENT + (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) + UNDENT)
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5354:33: E201 whitespace after '('
            INDENT + (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) + UNDENT)
                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5354:81: E202 whitespace before ')'
            INDENT + (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) + UNDENT)
                                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5356:24: E201 whitespace after '('
        smExpr = Group( Optional(NL) +
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5357:13: E128 continuation line under-indented for visual indent
            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5357:24: E201 whitespace after '('
            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5357:72: E202 whitespace before ')'
            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
                                                                       ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5357:75: E202 whitespace before ')'
            (OneOrMore( PEER + Group(blockStatementExpr) + Optional(NL) )) )
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5361:1: E305 expected 2 blank lines after class or function definition, found 1
alphas8bit = srange(r"[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]")
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5364:11: E231 missing whitespace after ','
anyOpenTag,anyCloseTag = makeHTMLTags(Word(alphas,alphanums+"_:").setName('any tag'))
          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5364:50: E231 missing whitespace after ','
anyOpenTag,anyCloseTag = makeHTMLTags(Word(alphas,alphanums+"_:").setName('any tag'))
                                                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5365:61: E231 missing whitespace after ','
_htmlEntityMap = dict(zip("gt lt amp nbsp quot apos".split(),'><& "\''))
                                                            ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5366:76: E225 missing whitespace around operator
commonHTMLEntity = Regex('&(?P<entity>' + '|'.join(_htmlEntityMap.keys()) +");").setName("common HTML entity")
                                                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5367:1: E302 expected 2 blank lines, found 0
def replaceHTMLEntity(t):
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5372:1: E305 expected 2 blank lines after class or function definition, found 1
cStyleComment = Combine(Regex(r"/\*(?:[^*]|\*(?!/))*") + '*/').setName("C style comment")
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5382:64: E225 missing whitespace around operator
cppStyleComment = Combine(Regex(r"/\*(?:[^*]|\*(?!/))*") + '*/'| dblSlashComment).setName("C++ style comment")
                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5392:44: E201 whitespace after '('
                                  Optional( Word(" \t") +
                                           ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5393:71: E202 whitespace before ')'
                                            ~Literal(",") + ~LineEnd() ) ) ).streamline().setName("commaItem")
                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5393:73: E202 whitespace before ')'
                                            ~Literal(",") + ~LineEnd() ) ) ).streamline().setName("commaItem")
                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5393:75: E202 whitespace before ')'
                                            ~Literal(",") + ~LineEnd() ) ) ).streamline().setName("commaItem")
                                                                          ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5394:36: E201 whitespace after '('
commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5394:46: E201 whitespace after '('
commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
                                             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5394:95: E202 whitespace before ')'
commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
                                                                                              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5394:121: E501 line too long (126 > 120 characters)
commaSeparatedList = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("commaSeparatedList")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5399:1: E302 expected 2 blank lines, found 1
class pyparsing_common:
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5548:83: E231 missing whitespace after ','
    hex_integer = Word(hexnums).setName("hex integer").setParseAction(tokenMap(int,16))
                                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5554:121: E501 line too long (140 > 120 characters)
    fraction = (signed_integer().setParseAction(convertToFloat) + '/' + signed_integer().setParseAction(convertToFloat)).setName("fraction")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5558:121: E501 line too long (141 > 120 characters)
    mixed_integer = (fraction | signed_integer + Optional(Optional('-').suppress() + fraction)).setName("fraction or mixed integer-fraction")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5565:121: E501 line too long (147 > 120 characters)
    sci_real = Regex(r'[+-]?\d+([eE][+-]?\d+|\.\d*([eE][+-]?\d+)?)').setName("real number with scientific notation").setParseAction(convertToFloat)
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5574:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5577:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5578:121: E501 line too long (128 > 120 characters)
    ipv4_address = Regex(r'(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}').setName("IPv4 address")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5583:71: E231 missing whitespace after ','
    _short_ipv6_address = (Optional(_ipv6_part + (':' + _ipv6_part)*(0,6)) + "::" + Optional(_ipv6_part + (':' + _ipv6_part)*(0,6))).setName("short IPv6 address")
                                                                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5583:121: E501 line too long (162 > 120 characters)
    _short_ipv6_address = (Optional(_ipv6_part + (':' + _ipv6_part)*(0,6)) + "::" + Optional(_ipv6_part + (':' + _ipv6_part)*(0,6))).setName("short IPv6 address")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5583:128: E231 missing whitespace after ','
    _short_ipv6_address = (Optional(_ipv6_part + (':' + _ipv6_part)*(0,6)) + "::" + Optional(_ipv6_part + (':' + _ipv6_part)*(0,6))).setName("short IPv6 address")
                                                                                                                               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5586:121: E501 line too long (140 > 120 characters)
    ipv6_address = Combine((_full_ipv6_address | _mixed_ipv6_address | _short_ipv6_address).setName("IPv6 address")).setName("IPv6 address")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5588:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5607:21: E231 missing whitespace after ','
        def cvt_fn(s,l,t):
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5607:22: E741 ambiguous variable name 'l'
        def cvt_fn(s,l,t):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5607:23: E231 missing whitespace after ','
        def cvt_fn(s,l,t):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5629:21: E231 missing whitespace after ','
        def cvt_fn(s,l,t):
                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5629:22: E741 ambiguous variable name 'l'
        def cvt_fn(s,l,t):
                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5629:23: E231 missing whitespace after ','
        def cvt_fn(s,l,t):
                      ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5639:121: E501 line too long (195 > 120 characters)
    iso8601_datetime = Regex(r'(?P<year>\d{4})-(?P<month>\d\d)-(?P<day>\d\d)[T ](?P<hour>\d\d):(?P<minute>\d\d)(:(?P<second>\d\d(\.\d*)?)?)?(?P<tz>Z|[+-]\d\d:?\d\d)?').setName("ISO8601 datetime")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5640:121: E501 line too long (153 > 120 characters)
    "ISO8601 datetime (C{yyyy-mm-ddThh:mm:ss.s(Z|+-00:00)}) - trailing seconds, milliseconds, and timezone optional; accepts separating C{'T'} or C{' '}"
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5646:5: E301 expected 1 blank line, found 0
    @staticmethod
    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5647:26: E741 ambiguous variable name 'l'
    def stripHTMLTags(s, l, tokens):
                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5652:48: W291 trailing whitespace
        """
        Parse action to remove HTML tags from web page HTML source

        Example::
            # strip HTML links from normal text
            text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
            td,td_end = makeHTMLTags("TD")
            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)("body") + td_end

            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
        """

                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5656:1: W293 blank line contains whitespace
        """
        Parse action to remove HTML tags from web page HTML source

        Example::
            # strip HTML links from normal text
            text = '<td>More info at the <a href="http://pyparsing.wikispaces.com">pyparsing</a> wiki page</td>'
            td,td_end = makeHTMLTags("TD")
            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)("body") + td_end

            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
        """
^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5661:102: W291 trailing whitespace
    _commasepitem = Combine(OneOrMore(~Literal(",") + ~LineEnd() + Word(printables, excludeChars=',')
                                                                                                     ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5662:41: E127 continuation line over-indented for visual indent
                                        + Optional( White(" \t") ) ) ).streamline().setName("commaItem")
                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5662:52: E201 whitespace after '('
                                        + Optional( White(" \t") ) ) ).streamline().setName("commaItem")
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5662:65: E202 whitespace before ')'
                                        + Optional( White(" \t") ) ) ).streamline().setName("commaItem")
                                                                ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5662:67: E202 whitespace before ')'
                                        + Optional( White(" \t") ) ) ).streamline().setName("commaItem")
                                                                  ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5662:69: E202 whitespace before ')'
                                        + Optional( White(" \t") ) ) ).streamline().setName("commaItem")
                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5663:42: E201 whitespace after '('
    comma_separated_list = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("comma separated list")
                                         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5663:52: E201 whitespace after '('
    comma_separated_list = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("comma separated list")
                                                   ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5663:101: E202 whitespace before ')'
    comma_separated_list = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("comma separated list")
                                                                                                    ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5663:121: E501 line too long (134 > 120 characters)
    comma_separated_list = delimitedList( Optional( quotedString.copy() | _commasepitem, default="") ).setName("comma separated list")
                                                                                                                        ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5675:16: E221 multiple spaces before operator
    selectToken    = CaselessLiteral("select")
               ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5676:14: E221 multiple spaces before operator
    fromToken      = CaselessLiteral("from")
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5678:10: E221 multiple spaces before operator
    ident          = Word(alphas, alphanums + "_$")
         ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5680:15: E221 multiple spaces before operator
    columnName     = delimitedList(ident, ".", combine=True).setParseAction(upcaseTokens)
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5682:15: E221 multiple spaces before operator
    columnSpec     = ('*' | columnNameList)
              ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5684:14: E221 multiple spaces before operator
    tableName      = delimitedList(ident, ".", combine=True).setParseAction(upcaseTokens)
             ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5685:18: E221 multiple spaces before operator
    tableNameList  = Group(delimitedList(tableName)).setName("tables")
                 ^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5686:1: W293 blank line contains whitespace

^
./venv/lib/python3.11/site-packages/setuptools/_vendor/pyparsing.py:5687:14: E221 multiple spaces before operator
    simpleSQL      = selectToken("command") + columnSpec("columns") + fromToken + tableNameList("tables")
             ^
./venv/lib/python3.11/site-packages/setuptools/config.py:362:44: E203 whitespace before ':'
        spec = value[len(include_directive) :]
                                           ^
./venv/lib/python3.11/site-packages/setuptools/config.py:647:54: E203 whitespace before ':'
            class_name = qualified_class_name[idx + 1 :]
                                                     ^
./venv/lib/python3.11/site-packages/wheel/cli/convert.py:162:1: C901 'wininst2wheel' is too complex (16)
def wininst2wheel(path, dest_dir):
^
./venv/lib/python3.11/site-packages/wheel/cli/pack.py:14:1: C901 'pack' is too complex (11)
def pack(directory, dest_dir, build_number):
^
./venv/lib/python3.11/site-packages/wheel/macosx_libfile.py:251:1: C901 'extract_macosx_min_system_version' is too complex (13)
def extract_macosx_min_system_version(path_to_lib):
^
./venv/lib/python3.11/site-packages/wheel/macosx_libfile.py:359:1: C901 'calculate_macosx_platform_tag' is too complex (14)
def calculate_macosx_platform_tag(archive_root, platform_tag):
^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.Dict' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.FrozenSet' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.IO' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.Iterable' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.Iterator' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.List' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.Optional' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:29:5: F401 'typing.Union' imported but unused
    from typing import (
    ^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:235:1: C901 'cpython_tags' is too complex (15)
def cpython_tags(
^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:386:1: C901 '_mac_binary_formats' is too complex (11)
def _mac_binary_formats(version, cpu_arch):
^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:419:1: C901 'mac_platforms' is too complex (14)
def mac_platforms(version=None, arch=None):
^
./venv/lib/python3.11/site-packages/wheel/vendored/packaging/tags.py:491:1: C901 '_is_manylinux_compatible' is too complex (12)
def _is_manylinux_compatible(name, arch, glibc_version):
^
423   C901 '_create_cipher' is too complex (11)
7     E101 indentation contains mixed spaces and tabs
13    E111 indentation is not a multiple of 4
18    E114 indentation is not a multiple of 4 (comment)
12    E115 expected an indented block (comment)
87    E116 unexpected indentation (comment)
46    E117 over-indented
9643  E122 continuation line missing indentation or outdented
67    E124 closing bracket does not match visual indentation
4     E125 continuation line with same indent as next logical line
201   E127 continuation line over-indented for visual indent
811   E128 continuation line under-indented for visual indent
28    E129 visually indented line with same indent as next logical line
1202  E131 continuation line unaligned for hanging indent
1165  E201 whitespace after '('
1125  E202 whitespace before ')'
207   E203 whitespace before ':'
165   E211 whitespace before '('
151   E221 multiple spaces before operator
69    E222 multiple spaces after operator
347   E225 missing whitespace around operator
9     E227 missing whitespace around bitwise or shift operator
3     E228 missing whitespace around modulo operator
26811 E231 missing whitespace after ','
70    E251 unexpected spaces around keyword / parameter equals
350   E252 missing whitespace around parameter equals
852   E261 at least two spaces before inline comment
208   E262 inline comment should start with '# '
231   E265 block comment should start with '# '
91    E266 too many leading '#' for block comment
7     E271 multiple spaces after keyword
5     E272 multiple spaces before keyword
62    E275 missing whitespace after keyword
98    E301 expected 1 blank line, found 0
666   E302 expected 2 blank lines, found 1
132   E303 too many blank lines (2)
149   E305 expected 2 blank lines after class or function definition, found 1
34    E306 expected 1 blank line before a nested definition, found 0
15    E401 multiple imports on one line
34    E402 module level import not at top of file
603   E501 line too long (121 > 120 characters)
17    E502 the backslash is redundant between brackets
20    E701 multiple statements on one line (colon)
67    E702 multiple statements on one line (semicolon)
8     E703 statement ends with a semicolon
3     E711 comparison to None should be 'if cond is None:'
8     E713 test for membership should be 'not in'
1     E714 test for object identity should be 'is not'
1     E721 do not compare types, use 'isinstance()'
12    E722 do not use bare 'except'
89    E731 do not assign a lambda expression, use a def
115   E741 ambiguous variable name 'l'
2     E743 ambiguous function definition 'l'
355   F401 'Cryptodome.Util.py3compat.byte_string' imported but unused
1     F402 import 'extract_from_urllib3' from line 185 shadowed by loop variable
44    F403 'from Cryptodome.Util.py3compat import *' used; unable to detect undefined names
446   F405 'bord' may be undefined, or defined from star imports: Cryptodome.Util.py3compat
1     F523 '...'.format(...) has unused arguments at position(s): 2
13    F811 redefinition of unused 'new' from line 137
60    F821 undefined name 'self'
90    F841 local variable 'q' is assigned to but never used
1356  W191 indentation contains tabs
162   W291 trailing whitespace
338   W293 blank line contains whitespace
33    W391 blank line at end of file
49463
(venv) (base) iMac-de-Guido:DIDWW-Winner-main webtechnicom$